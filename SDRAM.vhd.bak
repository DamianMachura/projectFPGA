library ieee;
use ieee.std_logic_1164.all;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use ieee.numeric_std.all;
use ieee.math_real.all;


ENTITY SDRAM IS
 PORT (
 address : IN INTEGER RANGE 0 TO 2**8-1;
 RW : std_logic;
 data : OUT std_logic_vector (15 DOWNTO 0));
 END ENTITY SDRAM;
 
 
 architecture behavioral of SDRAM is
 
 
 begin
		process (RADDR, CADDR, RW) is
			type dram is array (0 to 2**16 - 1) of std_logic_vector(15 downto 0);
			variable radd: INTEGER range 0 to 2**8 - 1;
			variable madd: INTEGER range 0 to 2**16 - 1;
			variable memory: dram;
		begin
				data <= (others => ‘Z’);
				if falling_edge(RADDR) then
						radd := address;
				elsif falling_edge(CADDR) then
						madd:=radd*2**18 +Address;
				if RADDR = ‘0’ and RW = ‘0’ then
						memory(madd) := data;
				end if;
				elsif CADDR = ‘0’ and RADDR = ‘0’ and RW = ‘1’ then
		data <= memory(madd);
 end if;
 end process;
 end architecture behavioral;